package com.tianshen.cash.base;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.KeyEvent;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;import com.tianshen.cash.R;import com.tianshen.cash.event.DummyEvent;import com.tianshen.cash.event.FinishCurrentActivityEvent;import com.tianshen.cash.utils.ViewUtil;import com.umeng.analytics.MobclickAgent;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import butterknife.ButterKnife;import butterknife.Unbinder;import cn.jpush.android.api.JPushInterface;public abstract class BaseActivity extends AppCompatActivity {    protected Context mContext;    private Unbinder mUnBinder;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView();        setContentView(R.layout.activity_base_layout);        initParent();        mUnBinder = ButterKnife.bind(this);        findViews();        setListensers();        MyApplicationLike myApplicationLike = MyApplicationLike.getMyApplicationLike();        myApplicationLike.addTempActivityInBackStack(this);        EventBus.getDefault().register(this);    }    @Override    protected void onActivityResult(int arg0, int arg1, Intent arg2) {        // TODO Auto-generated method stub        super.onActivityResult(arg0, arg1, arg2);    }    @Override    protected void onDestroy() {        super.onDestroy();        mUnBinder.unbind();        MyApplicationLike.getMyApplicationLike().removeTempActivityInBackStack(this);        EventBus.getDefault().unregister(this);        ViewUtil.cancelLoadingDialog();    }    private void initParent() {        mContext = this;        LinearLayout subCententView = (LinearLayout) this.findViewById(R.id.base_sub_activty_layout);        LayoutParams layoutParams = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,                ViewGroup.LayoutParams.MATCH_PARENT);        View centerView = View.inflate(mContext, setContentView(), null);        subCententView.addView(centerView, layoutParams);    }    protected boolean isShowNoNetworksPrompt() {        return true;    }    /**     * 跳转到某个Activity     */    protected void gotoActivity(Context mContext, Class<?> toActivityClass, Bundle bundle) {        Intent intent = new Intent(mContext, toActivityClass);        if (bundle != null) {            intent.putExtras(bundle);        }        mContext.startActivity(intent);        ((Activity) mContext).overridePendingTransition(R.anim.push_right_in, R.anim.not_exit_push_left_out);    }    /**     * 退出到某个Activity     */    protected void backActivity() {        finish();        overridePendingTransition(R.anim.not_exit_push_left_in, R.anim.push_right_out);    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        // 所有需要统一处理的onKeyDown写在这个if里面        if (isOnKeyDown()) {            if (keyCode == KeyEvent.KEYCODE_BACK) {                backActivity();            }        }        return super.onKeyDown(keyCode, event);    }    protected boolean isOnKeyDown() {        return true;    }    /**     * 加载子类布局     */    protected abstract int setContentView();    /**     * 加载控件     */    protected abstract void findViews();    /**     * 设置监听     */    protected abstract void setListensers();    @Override    protected void onResume() {        super.onResume();        MobclickAgent.onResume(this);        if (JPushInterface.isPushStopped(getApplicationContext())) {            JPushInterface.resumePush(getApplicationContext());        }    }    @Override    protected void onPause() {        super.onPause();        MobclickAgent.onPause(this);//		JPushInterface.onPause(this);    }    /**     * 该方法不执行，只是让Event编译通过     */    @Subscribe    public void dummy(DummyEvent event) {    }    @Subscribe    public void onFinishCurrentActivity(FinishCurrentActivityEvent event) {        finish();    }}